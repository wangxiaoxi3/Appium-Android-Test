{
  "uid" : "bad2b09c21e31909",
  "name" : "test_record.TestRecord.test_record_start",
  "title" : "Test record start",
  "time" : {
    "start" : 1542188253758,
    "stop" : 1542192414910,
    "duration" : 4161152
  },
  "summary" : {
    "attachments" : 0,
    "steps" : 2
  },
  "failure" : {
    "message" : "WebDriverException: Message: An unknown server-side error occurred while processing the command. Original error: Could not proxy command to remote server. Original error: Error: connect ECONNREFUSED 127.0.0.1:8200\n",
    "stackTrace" : "self = <base.actions.ElementActions object at 0x10e6ac438>\nlocator = {'name': 'record', 'type': 'id', 'value': 'com.papayamobile.fm.pre:id/record_record_image_view'}\nis_need_displayed = True\n\n    def _find_element(self, locator, is_need_displayed=True):\n        \"\"\"查找单个元素,如果有多个返回第一个\n    \n        Args:\n            locator: 定位器\n            is_need_displayed: 是否需要定位的元素必须展示\n    \n        Returns: 元素\n    \n        Raises: NotFoundElementError\n                未找到元素会抛 NotFoundElementError 异常\n    \n        \"\"\"\n        if 'timeOutInSeconds' in locator:\n            wait = locator['timeOutInSeconds']\n        else:\n            wait = 20\n    \n        try:\n            if is_need_displayed:\n                WebDriverWait(self.driver, wait).until(\n>                   lambda driver: self._get_element_by_type(driver, locator).is_displayed())\n\nbase/actions.py:339: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"035c3f9e-d285-42e3-853e-721ee48df4c9\")>\nmethod = <function ElementActions._find_element.<locals>.<lambda> at 0x10e88c510>\nmessage = ''\n\n    def until(self, method, message=''):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value is not False.\"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.time() + self._timeout\n        while True:\n            try:\n>               value = method(self._driver)\n\n/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/selenium/webdriver/support/wait.py:71: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndriver = <appium.webdriver.webdriver.WebDriver (session=\"035c3f9e-d285-42e3-853e-721ee48df4c9\")>\n\n>   lambda driver: self._get_element_by_type(driver, locator).is_displayed())\n\nbase/actions.py:339: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ndriver = <appium.webdriver.webdriver.WebDriver (session=\"035c3f9e-d285-42e3-853e-721ee48df4c9\")>\nlocator = {'name': 'record', 'type': 'id', 'value': 'com.papayamobile.fm.pre:id/record_record_image_view'}\nelement = True\n\n    @staticmethod\n    def _get_element_by_type(driver, locator, element=True):\n        \"\"\"通过locator定位元素(默认定位单个元素)\n    \n        Args:\n            driver:driver\n            locator:定位器\n            element:\n                true:查找单个元素\n                false:查找多个元素\n    \n        Returns:单个元素 或 元素list\n    \n        \"\"\"\n        value = locator['value']\n        ltype = locator['type']\n        L.i(\"[查找]元素 %s \" % locator)\n        if ltype == 'name':\n            ui_value = 'new UiSelector().textContains' + '(\\\"' + value + '\\\")'\n            return driver.find_element_by_android_uiautomator(\n                ui_value) if element else driver.find_elements_by_android_uiautomator(ui_value)\n        else:\n>           return driver.find_element(ltype, value) if element else driver.find_elements(ltype, value)\n\nbase/actions.py:419: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <appium.webdriver.webdriver.WebDriver (session=\"035c3f9e-d285-42e3-853e-721ee48df4c9\")>\nby = 'id', value = 'com.papayamobile.fm.pre:id/record_record_image_view'\n\n    def find_element(self, by=By.ID, value=None):\n        \"\"\"\n        'Private' method used by the find_element_by_* methods.\n    \n        :Usage:\n            Use the corresponding find_element_by_* instead of this.\n    \n        :rtype: WebElement\n        \"\"\"\n        if self.w3c:\n            if by == By.ID:\n                by = By.CSS_SELECTOR\n                value = '[id=\"%s\"]' % value\n            elif by == By.TAG_NAME:\n                by = By.CSS_SELECTOR\n            elif by == By.CLASS_NAME:\n                by = By.CSS_SELECTOR\n                value = \".%s\" % value\n            elif by == By.NAME:\n                by = By.CSS_SELECTOR\n                value = '[name=\"%s\"]' % value\n        return self.execute(Command.FIND_ELEMENT, {\n            'using': by,\n>           'value': value})['value']\n\n/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/selenium/webdriver/remote/webdriver.py:752: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <appium.webdriver.webdriver.WebDriver (session=\"035c3f9e-d285-42e3-853e-721ee48df4c9\")>\ndriver_command = 'findElement'\nparams = {'sessionId': '035c3f9e-d285-42e3-853e-721ee48df4c9', 'using': 'id', 'value': 'com.papayamobile.fm.pre:id/record_record_image_view'}\n\n    def execute(self, driver_command, params=None):\n        \"\"\"\n        Sends a command to be executed by a command.CommandExecutor.\n    \n        :Args:\n         - driver_command: The name of the command to execute as a string.\n         - params: A dictionary of named parameters to send with the command.\n    \n        :Returns:\n          The command's JSON response loaded into a dictionary object.\n        \"\"\"\n        if self.session_id is not None:\n            if not params:\n                params = {'sessionId': self.session_id}\n            elif 'sessionId' not in params:\n                params['sessionId'] = self.session_id\n    \n        params = self._wrap_value(params)\n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\n/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/selenium/webdriver/remote/webdriver.py:236: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <appium.webdriver.errorhandler.MobileErrorHandler object at 0x10e8421d0>\nresponse = {'status': 500, 'value': '{\"status\":13,\"value\":{\"message\":\"An unknown server-side error occurred while processing the ...ver. Original error: Error: connect ECONNREFUSED 127.0.0.1:8200\"},\"sessionId\":\"035c3f9e-d285-42e3-853e-721ee48df4c9\"}'}\n\n    def check_response(self, response):\n        try:\n            super(MobileErrorHandler, self).check_response(response)\n        except WebDriverException as wde:\n            if wde.msg == 'No such context found.':\n                raise NoSuchContextException(wde.msg, wde.screen, wde.stacktrace)\n            else:\n>               raise wde\n\n/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/appium/webdriver/errorhandler.py:29: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <appium.webdriver.errorhandler.MobileErrorHandler object at 0x10e8421d0>\nresponse = {'status': 500, 'value': '{\"status\":13,\"value\":{\"message\":\"An unknown server-side error occurred while processing the ...ver. Original error: Error: connect ECONNREFUSED 127.0.0.1:8200\"},\"sessionId\":\"035c3f9e-d285-42e3-853e-721ee48df4c9\"}'}\n\n    def check_response(self, response):\n        try:\n>           super(MobileErrorHandler, self).check_response(response)\n\n/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/appium/webdriver/errorhandler.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <appium.webdriver.errorhandler.MobileErrorHandler object at 0x10e8421d0>\nresponse = {'status': 500, 'value': '{\"status\":13,\"value\":{\"message\":\"An unknown server-side error occurred while processing the ...ver. Original error: Error: connect ECONNREFUSED 127.0.0.1:8200\"},\"sessionId\":\"035c3f9e-d285-42e3-853e-721ee48df4c9\"}'}\n\n    def check_response(self, response):\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if status is None or status == ErrorCode.SUCCESS:\n            return\n    \n        value = None\n        message = response.get(\"message\", \"\")\n        screen = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, basestring):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    status = value.get('error', None)\n                    if status is None:\n                        status = value[\"status\"]\n                        message = value[\"value\"]\n                        if not isinstance(message, basestring):\n                            value = message\n                            try:\n                                message = message['message']\n                            except TypeError:\n                                message = None\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = WebDriverException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        else:\n            exception_class = WebDriverException\n        if value == '' or value is None:\n            value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n        elif exception_class == UnexpectedAlertPresentException and 'alert' in value:\n            raise exception_class(message, screen, stacktrace, value['alert'].get('text'))\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: An unknown server-side error occurred while processing the command. Original error: Could not proxy command to remote server. Original error: Error: connect ECONNREFUSED 127.0.0.1:8200\n\n/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/selenium/webdriver/remote/errorhandler.py:192: WebDriverException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test.test_record.TestRecord object at 0x10e8b1400>\naction = <base.actions.ElementActions object at 0x10e6ac438>\n\n    @pytest.allure.feature('My stdio')\n    @allure.story('record')\n    @allure.severity('blocker')\n    @pytest.mark.flaky(reruns=2, reruns_delay=5)\n    def test_record_start(self, action: ElementActions):\n        \"\"\"\n        验证录音功能\n    \n        \"\"\"\n        L.d('test_record_start')\n        # fb登陆\n        login_fb_email(action)\n        # 进入侧边栏\n        action.click(MainPage.nav_drawer)\n        # 进入录音页面\n        action.click(ToolPage.record)\n        action.sleep(2)\n    \n        if action.is_text_displayed('录音'):\n            action.alert()\n        else:\n            pass\n        # 验证录音页面\n        try:\n            title = action.get_text(RecordPage.title)\n            assert title == 'Record'\n    \n        except AssertionError:\n            action.screenshot(\"RecordPage_title_error\")\n            file = tools.Find.find_screen(\"RecordPage_title_error\")\n            allure.attach(\"RecordPage_title_error.png\", file, allure.attachment_type.PNG)\n            action.quit()\n    \n        try:\n            page_time = action.get_text(RecordPage.time)\n            assert page_time == '00:00:00'\n    \n        except AssertionError:\n            action.screenshot(\"RecordPage_time_error\")\n            file = tools.Find.find_screen(\"RecordPage_time_error\")\n            allure.attach(\"RecordPage_time_error.png\", file, allure.attachment_type.PNG)\n            action.quit()\n    \n        # 开始录音\n        action.click(RecordPage.record)\n        # 录音30分钟\n        action.sleep(1800)\n        # 停止录音\n>       action.click(RecordPage.record)\n\ntest/test_record.py:66: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nbase/actions.py:98: in click\n    el = self._find_element(locator)\nbase/actions.py:347: in _find_element\n    self.screenshot('no_element_%s' % filename)\nbase/actions.py:301: in screenshot\n    self.driver.get_screenshot_as_file(filename)\n/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/selenium/webdriver/remote/webdriver.py:798: in get_screenshot_as_file\n    png = self.get_screenshot_as_png()\n/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/selenium/webdriver/remote/webdriver.py:817: in get_screenshot_as_png\n    return base64.b64decode(self.get_screenshot_as_base64().encode('ascii'))\n/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/selenium/webdriver/remote/webdriver.py:827: in get_screenshot_as_base64\n    return self.execute(Command.SCREENSHOT)['value']\n/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/selenium/webdriver/remote/webdriver.py:236: in execute\n    self.error_handler.check_response(response)\n/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/appium/webdriver/errorhandler.py:29: in check_response\n    raise wde\n/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/appium/webdriver/errorhandler.py:24: in check_response\n    super(MobileErrorHandler, self).check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <appium.webdriver.errorhandler.MobileErrorHandler object at 0x10e8421d0>\nresponse = {'status': 500, 'value': '{\"status\":13,\"value\":{\"message\":\"An unknown server-side error occurred while processing the ...ver. Original error: Error: connect ECONNREFUSED 127.0.0.1:8200\"},\"sessionId\":\"035c3f9e-d285-42e3-853e-721ee48df4c9\"}'}\n\n    def check_response(self, response):\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if status is None or status == ErrorCode.SUCCESS:\n            return\n    \n        value = None\n        message = response.get(\"message\", \"\")\n        screen = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, basestring):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    status = value.get('error', None)\n                    if status is None:\n                        status = value[\"status\"]\n                        message = value[\"value\"]\n                        if not isinstance(message, basestring):\n                            value = message\n                            try:\n                                message = message['message']\n                            except TypeError:\n                                message = None\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = WebDriverException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        else:\n            exception_class = WebDriverException\n        if value == '' or value is None:\n            value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n        elif exception_class == UnexpectedAlertPresentException and 'alert' in value:\n            raise exception_class(message, screen, stacktrace, value['alert'].get('text'))\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: An unknown server-side error occurred while processing the command. Original error: Could not proxy command to remote server. Original error: Error: connect ECONNREFUSED 127.0.0.1:8200\n\n/Library/Frameworks/Python.framework/Versions/3.5/lib/python3.5/site-packages/selenium/webdriver/remote/errorhandler.py:192: WebDriverException"
  },
  "description" : {
    "value" : "\n        验证录音功能\n\n        ",
    "type" : "TEXT"
  },
  "severity" : "BLOCKER",
  "status" : "PASSED",
  "testId" : null,
  "suite" : {
    "uid" : "ed9faf26518aca11",
    "name" : "test",
    "title" : "Test"
  },
  "steps" : [ {
    "name" : "fb账号登录",
    "title" : "fb账号登录",
    "time" : {
      "start" : 1542188302899,
      "stop" : 1542188337494,
      "duration" : 34595
    },
    "summary" : {
      "attachments" : 0,
      "steps" : 0
    },
    "status" : "PASSED",
    "attachments" : [ ],
    "steps" : [ ]
  }, {
    "name" : "fb账号登录",
    "title" : "fb账号登录",
    "time" : {
      "start" : 1542190207675,
      "stop" : 1542190244432,
      "duration" : 36757
    },
    "summary" : {
      "attachments" : 0,
      "steps" : 0
    },
    "status" : "PASSED",
    "attachments" : [ ],
    "steps" : [ ]
  } ],
  "attachments" : [ ],
  "issues" : [ ],
  "labels" : [ {
    "name" : "feature",
    "value" : "My stdio"
  }, {
    "name" : "suite-name",
    "value" : "test"
  }, {
    "name" : "severity",
    "value" : "blocker"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "suite-title",
    "value" : null
  }, {
    "name" : "thread",
    "value" : "41033-MainThread"
  }, {
    "name" : "host",
    "value" : "xiaoxideMacBook-Pro.local"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "story",
    "value" : "record"
  } ],
  "parameters" : [ ]
}